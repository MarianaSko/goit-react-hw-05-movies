{"version":3,"file":"static/js/736.2d8dbd59.chunk.js","mappings":"4QAEaA,EAAWC,EAAAA,GAAAA,GAASC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,wJAQpBC,EAAWH,EAAAA,GAAAA,GAASI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,ovB,2BCgDjC,EAnDa,WACX,IAAQG,GAAOC,EAAAA,EAAAA,MAAPD,GACRE,GAAwBC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA7BI,EAAIF,EAAA,GAAEG,EAAOH,EAAA,GACpBI,GAAkCL,EAAAA,EAAAA,WAAS,GAAMM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAA1CE,EAASD,EAAA,GAAEE,EAAYF,EAAA,GAgB9B,OAdAG,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAc,eAAAC,GAAAC,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAAC,IAAA,IAAAC,EAAA,OAAAF,IAAAA,MAAA,SAAAG,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAEA,OAFAF,EAAAC,KAAA,EAEnBT,GAAa,GAAMQ,EAAAE,KAAA,GACDC,EAAAA,EAAAA,IAAatB,GAAI,KAAD,EAA5BkB,EAAGC,EAAAI,KACThB,EAAQW,GAAKC,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAK,GAAAL,EAAA,SAEbM,QAAQC,IAAIP,EAAAK,GAAMG,SAAS,QAEP,OAFOR,EAAAC,KAAA,GAE3BT,GAAa,GAAOQ,EAAAS,OAAA,6BAAAT,EAAAU,OAAA,GAAAZ,EAAA,wBAEvB,kBAVmB,OAAAH,EAAAgB,MAAA,KAAAC,UAAA,KAWpBlB,GACF,GAAG,CAACb,KAEFgC,EAAAA,EAAAA,MAAA,OAAAC,SAAA,CACGvB,IAAawB,EAAAA,EAAAA,KAACC,EAAAA,EAAY,CAAAF,SAAC,gBAC5BC,EAAAA,EAAAA,KAACxC,EAAQ,CAAAuC,SACU,IAAhB3B,EAAK8B,OACJ9B,EAAK+B,KAAI,SAAAC,GAAK,OACZN,EAAAA,EAAAA,MAAClC,EAAQ,CAAAmC,SAAA,EACPD,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAAD,SAAKK,EAAMC,OACVD,EAAME,YACLR,EAAAA,EAAAA,MAAA,KAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,QAAAD,SAAM,eAAiB,IAAEK,EAAME,gBAIpCF,EAAMG,eACLP,EAAAA,EAAAA,KAAA,OACEQ,IAAG,mCAAAC,OAAqCL,EAAMG,cAC9CG,IAAKN,EAAMC,KACXM,MAAM,UAbGP,EAAMQ,QAgBV,KAGbZ,EAAAA,EAAAA,KAACa,EAAAA,EAAa,CAAAd,SAAC,+CAKzB,C,uGCtDae,EAAerD,EAAAA,GAAAA,GAASC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,+OAgBxBkD,EAAgBpD,EAAAA,GAAAA,EAAQI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,kF","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","components/Reviews/Reviews.styled.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const StyledUl = styled.ul`\n  padding-top: 10px;\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n  gap: 20px;\n  align-items: center;\n`;\n\nexport const StyledLi = styled.li`\n  border-radius: 8px;\n  height: 460px;\n  box-shadow: rgba(2, 92, 122, 0.25) 0px 54px 55px,\n    rgba(2, 92, 122, 0.12) 0px -12px 30px, rgba(2, 92, 122, 0.12) 0px 4px 6px,\n    rgba(2, 92, 122, 0.17) 0px 12px 13px, rgba(2, 92, 122, 0.09) 0px -3px 5px;\n  /* box-shadow: rgba(2, 92, 122, 0.24) 0px 3px 8px; */\n  padding: 10px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 20px;\n  div {\n    display: flex;\n    flex-direction: column;\n    gap: 20px;\n    height: 100px;\n  }\n  span {\n    font-weight: bold;\n    text-transform: uppercase;\n  }\n  h2 {\n    font-style: oblique;\n    color: rgb(2, 92, 122);\n    text-transform: uppercase;\n  }\n  p {\n    font-weight: 500;\n    align-self: flex-start;\n  }\n`;\n","import { getMovieCast } from 'Api/movies';\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { StyledLi, StyledUl } from './Cast.styled';\nimport { StyledLoader } from '../../pages/Page.styled';\nimport { StyledMessage } from 'components/Reviews/Reviews.styled';\n\nconst Cast = () => {\n  const { id } = useParams();\n  const [cast, setCast] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    const getCastFromApi = async () => {\n      try {\n        setIsLoading(true);\n        const res = await getMovieCast(id);\n        setCast(res);\n      } catch (error) {\n        console.log(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    getCastFromApi();\n  }, [id]);\n  return (\n    <div>\n      {isLoading && <StyledLoader>Loading...</StyledLoader>}\n      <StyledUl>\n        {cast.length !== 0 ? (\n          cast.map(actor => (\n            <StyledLi key={actor.cast_id}>\n              <div>\n                <h2>{actor.name}</h2>\n                {actor.character && (\n                  <p>\n                    <span>Character:</span> {actor.character}\n                  </p>\n                )}\n              </div>\n              {actor.profile_path && (\n                <img\n                  src={`https://image.tmdb.org/t/p/w500/${actor.profile_path}`}\n                  alt={actor.name}\n                  width=\"200\"\n                />\n              )}\n            </StyledLi>\n          ))\n        ) : (\n          <StyledMessage>We don't have any cast for this movie.</StyledMessage>\n        )}\n      </StyledUl>\n    </div>\n  );\n};\n\nexport default Cast;\n","import styled from 'styled-components';\n\nexport const StyledReview = styled.li`\n  display: flex;\n  align-items: center;\n  gap: 10px;\n  flex-direction: column;\n  color: #01232e;\n  span {\n    font-weight: bold;\n    text-transform: uppercase;\n    color: #025c7a;\n  }\n  p {\n    font-weight: 500;\n  }\n`;\n\nexport const StyledMessage = styled.p`\n  font-style: oblique;\n  color: #025c7a;\n  text-transform: uppercase;\n`;\n"],"names":["StyledUl","styled","_templateObject","_taggedTemplateLiteral","StyledLi","_templateObject2","id","useParams","_useState","useState","_useState2","_slicedToArray","cast","setCast","_useState3","_useState4","isLoading","setIsLoading","useEffect","getCastFromApi","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","res","_context","prev","next","getMovieCast","sent","t0","console","log","message","finish","stop","apply","arguments","_jsxs","children","_jsx","StyledLoader","length","map","actor","name","character","profile_path","src","concat","alt","width","cast_id","StyledMessage","StyledReview"],"sourceRoot":""}